#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from sparrow import SparrowTransport
from sparrow.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string authenticate(string username, string password)'
  print '  string logout()'
  print '   show_databases()'
  print '  string create_database(string dbname)'
  print '  string drop_database(string dbname)'
  print '  string insert_data(DataObject object)'
  print '  string delete_data(string dbname, string key)'
  print '  SpqlResult spql_query(string query)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SparrowTransport.Client(protocol)
transport.open()

if cmd == 'authenticate':
  if len(args) != 2:
    print 'authenticate requires 2 args'
    sys.exit(1)
  pp.pprint(client.authenticate(args[0],args[1],))

elif cmd == 'logout':
  if len(args) != 0:
    print 'logout requires 0 args'
    sys.exit(1)
  pp.pprint(client.logout())

elif cmd == 'show_databases':
  if len(args) != 0:
    print 'show_databases requires 0 args'
    sys.exit(1)
  pp.pprint(client.show_databases())

elif cmd == 'create_database':
  if len(args) != 1:
    print 'create_database requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_database(args[0],))

elif cmd == 'drop_database':
  if len(args) != 1:
    print 'drop_database requires 1 args'
    sys.exit(1)
  pp.pprint(client.drop_database(args[0],))

elif cmd == 'insert_data':
  if len(args) != 1:
    print 'insert_data requires 1 args'
    sys.exit(1)
  pp.pprint(client.insert_data(eval(args[0]),))

elif cmd == 'delete_data':
  if len(args) != 2:
    print 'delete_data requires 2 args'
    sys.exit(1)
  pp.pprint(client.delete_data(args[0],args[1],))

elif cmd == 'spql_query':
  if len(args) != 1:
    print 'spql_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.spql_query(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
